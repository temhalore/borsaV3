<#@ include file="OrmLite.Core.ttinclude" #>
<#
	// Settings
	ConnectionStringName = "repo";			// Uses last connection string in config if not specified
	var Namespace = "Prj.COMMON.Enums";
	SchemaName = "";
	ClassPrefix = "";
	ClassSuffix = "";
	//bool SplitIntoMultipleFiles = false;		// if true: Generates one file for every class
	bool MakeSingular = false;			// if true: Changes the classname to singular if tablename is not singular
	//bool UseIdAsPK = false;				// if true: Changes the primary key property name to Id
	//bool GenerateConstructor = true;		// if true: Generates the default empty constructor 
	//bool UseSchemaAttribute = false;		// if true: Adds explicit '[Schema]' attribute
	//bool CreateAutoQueryTypes = false; //if true: Will create <TypeName>Query types with all possible search fields explicitly typed
	//bool AddNamedConnection = false; //if true: Adds NamedConnection attribute so AutoQuery will override default IDbConnection
	//bool IncludeReferences = false; //if true: Addes References(typeof(ReferenceTableType)) to FKs
	//string UseSpecificNamedConnection = ""; //if not null: Will use name provided as NamedConnection and AddNamedConnection = true, else ConnectionStringName is used as default NamedConnection
    // Read schema
	var tables = LoadTables(MakeSingular);
#>

<#
//@ assembly name="MySql.Data" 
#>

<#@ output extension=".cs" #>
 <#
//if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
//if (string.IsNullOrEmpty(Namespace)) Namespace="OrmLitePoco";
//var manager = Manager.Create(Host, GenerationEnvironment);
//manager.StartHeader();
 #>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Configuration; 
using System.Data.Common;
using System.Data;
namespace <#=Namespace #>
{
    public class siltireileberaber_AppEnums
    {
		<#
		//var conn = GetConn();
        //var dataTable = new DataTable();
        //var query = "select * from pos.Kod kod where ISDELETED=0";
	    //var oracleConnection = new OracleConnection(conn);
        //using (OracleCommand cmd = new OracleCommand(query, oracleConnection))
        //{
            //using (OracleDataAdapter da = new OracleDataAdapter(cmd))
            //{
                //da.Fill(dataTable);
                //da.Dispose();
            //}
        //}
        //oracleConnection.Close();
		//#>

<#
      var conn = GetConn();

	      SqlConnection sqlConnection = new SqlConnection(conn);  
		  SqlCommand cmd = new SqlCommand("select * from pos.Kod kod where ISDELETED=0", sqlConnection);  
		    
		  DataTable dataTable = new DataTable();
		
            using (SqlDataAdapter da = new SqlDataAdapter())
            {
				da.SelectCommand = cmd;  
                da.Fill(dataTable);
                da.Dispose();
            }
        sqlConnection.Close();

               var enumList = (from e in dataTable.AsEnumerable()
               where e.Field<int>("TIP_ID") == 0
               select e).ToList();
foreach (var enumItem in enumList)
{
            var kodID = Convert.ToDecimal(enumItem["ID"]);

			var enumName = enumItem["KOD"].ToString();
			enumName = ReplaceIllegalChar(enumName);
			enumName = enumName.Replace("Ý", "I")
							   .Replace("Ü", "U")
							   .Replace("Ð", "G")
							   .Replace("Þ", "S")
							   .Replace("Ç", "C")
							   .Replace("Ö", "O")
							   .Replace("ý", "i")
							   .Replace("ü", "u")
							   .Replace("ð", "g")
							   .Replace("þ", "s")
							   .Replace("ç", "c")
							   .Replace("ö", "o");
#>
public enum <#=enumName #> 
		{   
			Empty = 0, 
		   <#
            var enumElementList = (from e in dataTable.AsEnumerable()
                                    where e.Field<int>("TIP_ID") == kodID
                                    select e).ToList();
			int i = 0;
			string _str = ",";
            foreach (var enumElement in enumElementList)
            {
				i++;
				if(i == enumElementList.Count())
					_str="";
                var enumElementName = enumElement["KOD"].ToString();
                var enumElementID = enumElement["ID"].ToString();
		        enumElementName = ReplaceIllegalChar(enumElementName.Replace("-", "N").Replace("+", "P"));

				enumElementName = enumElementName.Replace("Ý", "I")
								   .Replace("Ü", "U")
								   .Replace("Ð", "G")
								   .Replace("Þ", "S")
								   .Replace("Ç", "C")
								   .Replace("Ö", "O")
								   .Replace("ý", "i")
								   .Replace("ü", "u")
								   .Replace("ð", "g")
								   .Replace("þ", "s")
								   .Replace("ç", "c")
								   .Replace("ö", "o")
								   .Replace("__", "_");

							if(String.IsNullOrEmpty(enumElementName))
					continue;
			#>
	<#=enumElementName#> = <#=enumElementID #><#=_str #>
		<# } #>
}
		<#  #>
<# } #>

		public enum KodTipList
		{    
<#

for (int i = 0; i < enumList.Count; i++)
{
				string _str = ",";
				if(i == enumList.Count()-1){
					_str="";
				}
            var enumElementID = Convert.ToDecimal(enumList[i]["ID"]);

			var enumElementName = enumList[i]["KOD"].ToString();
			enumElementName = ReplaceIllegalChar(enumElementName);
			enumElementName = enumElementName.Replace("Ý", "I")
							   .Replace("Ü", "U")
							   .Replace("Ð", "G")
							   .Replace("Þ", "S")
							   .Replace("Ç", "C")
							   .Replace("Ö", "O")
							   .Replace("ý", "i")
							   .Replace("ü", "u")
							   .Replace("ð", "g")
							   .Replace("þ", "s")
							   .Replace("ç", "c")
							   .Replace("ö", "o");
#>
			<#=enumElementName#> = <#=enumElementID #><#=_str #>		
<#  #>
		<# } #>
} 
	}
}